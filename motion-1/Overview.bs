<h1>Motion Path Module Level 1</h1>
<pre class='metadata'>
Level: 1
Status: ED
ED: https://drafts.fxtf.org/motion-1/
Shortname: motion
TR: https://www.w3.org/TR/motion-1/
Previous Version: https://www.w3.org/TR/2015/WD-motion-1-20150409/
Group: fxtf
Link Defaults: css-shapes-1 (type) <basic-shape>, css-transforms-1 (property) transform/transform-origin
Editor: Dirk Schulze, Adobe Systems Inc., dschulze@adobe.com
Editor: Shane Stephens, Google, shanestephens@google.com
Editor: Jihye Hong, LG Electronics, jh.hong@lge.com
Abstract: Motion path allows authors to animate any graphical object along an author specified path.
</pre>

<pre class="anchors">
url: https://svgwg.org/svg2-draft/shapes.html#TermShapeElement; type: dfn; spec: SVG2; text: shape element
url: https://www.w3.org/TR/SVG11/struct.html#DefsElement; spec: SVG11; type: element; text: defs
</pre>


<style>
  /* Style for bikeshed variant of switch/case <dl>s */
  div.switch dl > dd > ol.only {
    margin-left: 0;
  }

  div.switch dl > dd > ol.algorithm {
    margin-left: -2em;
  }

  div.switch dl {
    padding-left: 2em;
  }

  div.switch dl > dt {
    text-indent: -1.5em;
    margin-top: 1em;
  }

  div.switch dl > dt + dt {
    margin-top: 0;
  }

  div.switch dl > dt > p {
    display: inline;
  }

  div.switch dl > dt:before {
    content: '\21AA';
    padding: 0 0.5em 0 0;
    display: inline-block;
    width: 1em;
    text-align: right;
    line-height: 0.5em;
  }
</style>

<h2 id="intro">Introduction</h2>

<em>This section is not normative.</em>

Authors have possibilities to position objects like elements, boxes or containers relative to each other or absolutely in their own coordinate system. CSS Transforms extends these possibilities with a set of transform functions allowing authors to mutate the object's <a>local coordinate system</a>. With CSS Animations and CSS Transitions, these static placements can change over a given period of time. Both kind of animations are powerful to express transitions in time but not suitable to describe transitions of location of an object over time.

This specification allows authors to specify a <a>path</a>. The object can be positioned, transitioned and animated along this path over a given period of time. The time may be static if no animation was specified.

<div class="example">
  <p>In the following example, a schematic of an air plane is animated along a path. The plane faces in the direction of the path at each position on the path.
  <div class=figure>
    <img src="images/motion-path.svg" width="470" height="120" alt="Example Path">
    <p class=caption>A black plane at different positions on a blue dotted path, rotated in the direction of the path.</p>
  </div>
</div>

A path may consist of an <<angle>> or <<basic-shape>> like <<circle()>>, <<inset()>> or <<polygon()>>. To allow authors to specify curves and sub-paths, this specification adds the <<path()>> function in addition to the existing <<basic-shape>> functions. The <<path()>> function takes an SVG Path string as input [[!SVG2]]. As a third option, authors may reference an SVG <a>shape element</a> by <<url>> which is used as the path.

<h2 id="placement">Module interactions</h2>

This specification defines a set of CSS properties that affect the visual rendering of elements to which those properties are applied. These effects are applied after elements have been sized and positioned according to the <a href="https://www.w3.org/TR/CSS2/visuren.html" lt="Visual formatting model">Visual formatting model</a> from [[!CSS21]]. Some values of these properties result in the creation of a <a spec="css21">stacking context</a>.

Some CSS properties in this specification manipulate the user coordinate system of the element by transformations. These transformations are pre-multiplied to transformations specified by the 'transform' property or deriving properties.

The term <a href="">object bounding box</a> follows the definition in SVG 1.1 [[!SVG11]].

<h2 id="values">Values</h2>

This specification follows the <a href="https://www.w3.org/TR/CSS21/about.html#property-defs">CSS property definition conventions</a> from [[!CSS21]]. Basic shapes are defined in CSS Shapes Module Level 1 [[!CSS-SHAPES]]. Value types not defined in these specifications are defined in CSS Values and Units Module Level 3 [[!CSS3VAL]]. Basic shapes are extended by the <<path()>> basic shape function.

In addition to the property-specific values listed in their definitions, all properties defined in this specification also accept CSS-wide keywords such as <a href="https://www.w3.org/TR/CSS21/cascade.html#value-def-inherit">inherit</a> as their property value [[!CSS3VAL]]. For readability it has not been repeated explicitly.

<h2 id="motion-paths-overview">Motion Paths</h2>

ISSUE: Add more details and examples.

<h3 id="offset-path-property">Define a path: The 'offset-path' property</h3>

<pre class='propdef'>
Name: offset-path
Value: <<url>> | <<angle>> && contain? | [ <<basic-shape>> | <<path()>> ] || <<geometry-box>> | none
Initial: none
Applies to: All elements. In SVG, it applies to <a>container elements</a> excluding the <{defs}> element and all <a>graphics elements</a>
Inherited: no
Percentages: n/a
Computed value: as specified
Media: visual
Animatable: If the start and end values are <<angle>> values, otherwise no
</pre>

Specifies the <a>path</a> the element gets positioned at.
The element's exact position on the path is determined by the 'offset-distance' property.
A <dfn>path</dfn> is either a specified path with one or multiple sub-paths or the geometry
of a not styled basic shape.
Each shape or path must define an <dfn>initial position</dfn> for the computed value of "0"
for 'offset-distance' and an <dfn>initial direction</dfn> which specifies the rotation of 
the object on the initial position.

In this specification, a direction (or rotation) of ''0 degree'' is equivalent to the direction of 
the positive y-axis in the object's <a>local coordinate system</a>.<br>
E.g. A rotation of ''0 degree'' points to the upper side of the UA if the object 
and its ancestors have no transformation applied.

Values have the following meanings:

<dl dfn-for="offset-path">
<dt><<angle>></dt>
<dd>
	The path is a line segment that starts from the position of the element 
	and proceeds in the direction defined by  the specified <<angle>> from the y axis. 
	The path ends at the edge of the containing block.
	For <<angle>>, the initial value ''none'' is interpreted as ''0deg'',
	the element can be positioned along the y axis.
	If the <<angle>> value increases in the positive direction, the element moves clockwise.
	
	<p class="note">Note: Defining a path with <<angle>>, 
	the element can be positioned with the used of polar coordinates.
	The polar coordinate system is a two-dimensional coordinate system in which each point on a plane
	is determined by a distance from a fixed point and an angle from a fixed line.
	The fixed point which is similar to the origin of a Cartesian coordinate system is called the pole,
	and the fixed line which is a ray from the pole is the polar axis.
	This coordinate system specifies the position of a point with a certain distance from the pole
	and a certain angle measured from the polar axis to the segment connecting the pole.<br>
	In mathematical theory, the polar axis is commonly defined as the positive direction 
	of the x axis, but we consider the polar axis as the positive direction of the y axis 
	for consistency with other CSS specifications such as [[!CSS3VAL]], <<angle>> value.
	(as the preceding line doesn't have "x axis position")
	</p>
	<dl>
		<dt><dfn>contain</dfn></dt>
		<dd>
			When the value of 'offset-distance' would select a point on the path 
			which is outside the edge of the containing element, the value is instead clipped 
			so that the selected point lies on the edge of the element.
		</dd>
		<div class='example'>
		Here are some examples.
		The first example shows that some parts of elements are outside of the path.
		<pre class="lang-html">
			&lt;body>
				&lt;div style="offset-path: 45deg; offset-distance: 100%">&lt;/div>
				&lt;div style="offset-path: 180deg; offset-distance: 100%">&lt;/div>
			&lt;/body>
		</pre>
		<div class=figure> 
			<img alt="An image of elements positioned without contain" src="images/offset_distance_without_contain.png" style="width: 200px;"/>
			<figcaption>'offset-path' without 'contain'</figcaption>
		</div>

		In the second example, 'contain' is given to the 'offset-path' value of each element 
		to avoid overflowing.
		<pre class="lang-html">
			&lt;body>
				&lt;div style="offset-path: 45deg contain; offset-distance: 100%">&lt;/div>
				&lt;div style="offset-path: 180deg contain; offset-distance: 100%">&lt;/div>
			&lt;/body>
		</pre>
		<div class=figure>
			<img alt="An image of elements positioned with contain" src="images/offset_distance_with_contain.png" style="width: 200px;"/>
			<figcaption>'offset-path' with 'contain'</figcaption>
		</div>
		</div>
	</dl>
</dd>

<dt><<basic-shape>></dt>
<dd>The path is a basic shape as specified in CSS Shapes [[!CSS-SHAPES]].
The initial position and the initial direction for basic shapes are defined as follows:
	<dl>
		<dt><<circle()>></dt>
		<dt><<ellipse()>></dt>
		<dd>The <a>initial position</a> is defined by the point where a virtual tangent 
		to the circle/ellipse would reach the top vertical position. 
		The <a>initial direction</a> is 90 degrees.</dd>
		<dt><<inset()>></dt>
		<dd>The <a>initial position</a> is defined by the left top corner 
		of the rectangle.
		The <a>initial direction</a> is 0 degree.</dd>
		<dt><<polygon()>></dt>
		<dd>The <a>initial position</a> is defined by the first coordinate pair 
		of the polygon.
		The <a>initial direction</a> is defined by the vector connecting 
		the initial position with the next following coordinate pair 
		that isn't equal to the initial position. 
		If there is no such unequal coordinate pair, the initial direction is 
		defined with 0 degree.</dd>
	</dl>
	</dd>
	<dt><dfn>path()</dfn> = path([ <<fill-rule>> ,]? <<string>>)</dt>
	<dd>The <<string>> represents an SVG Path data string.
		The path data string must be conform to the grammar and parsing rules of SVG 1.1 [[!SVG11]].
		The initial position is defined by the first “move to” argument in the path string. For the initial direction follow SVG 1.1 [[!SVG11]].

		<<fill-rule>> - The filling rule used to determine the interior of the path.
		See 'fill-rule' property in SVG for details. Possible values are ''nonzero'' 
		or ''evenodd''.
		Default value when omitted is ''nonzero''.
	</dd>
	<dt><<url>></dt>
	<dd>References an SVG <a>shape element</a> and uses its geometry as path.
	See SVG 1.1 for more information about the initial position and initial direction [[!SVG11]].
	</dd>
	<dt dfn-type=value><dfn>none</dfn></dt>
	<dd>No path gets created.</dd>
</dl>

A computed value of other than ''none'' results in the creation of a <a spec="css21">stacking context</a> [[!CSS21]] 
the same way that CSS 'opacity' [[CSS3COLOR]] does for values other than ''1'',
unless the element is an SVG element without an associated CSS layout box.

A reference that fails to download, is not a reference to an SVG <a>shape element</a> element,
or is non-existent is ignored. No path and no stacking context are created.

See the section <a href="#offset-processing">“Offset processing”</a> for how to process a path.

For SVG elements without associated CSS layout box, the <a>used value</a> for <a value for=mask-clip>content-box</a>,
<a value for=mask-clip>padding-box</a>, <a value for=mask-clip>border-box</a> and <a value for=mask-clip>margin-box</a> is 
<a value for=clip-path>fill-box</a>.

For elements with associated CSS layout box, the <a>used value</a> for <a value for=clip-path>fill-box</a>, 
<a value for=clip-path>stroke-box</a> and <a value for=clip-path>view-box</a> is <a value for=mask-clip>border-box</a>.

<h3 id="offset-distance-property">Position on the path: The 'offset-distance' property</h3>
<pre class='propdef'>
Name: offset-distance
Value: <<length-percentage>> <<size>>?
Initial: 0
Applies to: All elements. In SVG, it applies to <a>container elements</a> excluding the <{defs}> element and all <a>graphics elements</a>
Inherited: no
Percentages: refer to the total path length
Computed value: as specified
Media: visual
Animatable: yes
</pre>

Describes the position of the element along the specified <a>path</a>.

<dl dfn-for="offset-distance" dfn-type="value">
<dt><<length-percentage>></dt>
<dd>The distance from the initial position of the shape or path to the position 
of the element.

Percentages are relative to the length of the path - that is the distance between 
the initial position and the end position of the path.</dd>

<dt><<size>></dt>
<dd>Decides the position of the end point of the path when it is used with <<percentage>>.
	When the offset of the element on the path is specified with <<percentage>>, 
	it needs to guarantee the constant calculated value regardless of <<angle>>. 
	To do that, <<size>> gives a distance between the start point and the end point of the path.

	It is defined as

	&nbsp;<b>&lt;size&gt;</b> = [ closest-side | closest-corner | farthest-side | farthest-corner ]

	If omitted it defaults to <var>closest-side</var>.

	<dl>
		<dt><dfn>closet-side</dfn></dt>
		<dd>The distance is measured between the initial position and the closest side
		of the box from it.</dd>

		<dt><dfn>closest-corner</dfn></dt>
		<dd>The distance is measured between the initial position and the closest corner 
		of the box from it.</dd>

		<dt><dfn>farthest-side</dfn></dt>
		<dd>The distance is measured between the initial position and the farthest side 
		of the box from it.</dd>

		<dt><dfn>farthest-corner</dfn></dt>
		<dd>The distance is measured between the initial position and the farthest corner
		of the box from it.</dd>
	</dl>
	<p class='note'>Note: When the initial position is at one of the corners of 
	the containing block, the closest side takes the edge that the initial position 
	is on. 
	Even if the offset given by <<length>> or <<percentage>> changes, 
	the position of the element specified with <var>closest-side</var> is the same.
	</p>
</dd>

See the section <a href="#offset-processing">“Offset processing”</a> for how to process an 'offset-distance'.

<div class='example'>
This example shows a way to align elements within the polar coordinate system using 'offset-path', 'offset-distance'.
<pre class="lang-html">
	&lt;body>
		&lt;div id="circle1"&lt;/div>
		&lt;div id="circle2"&lt;/div>
		&lt;div id="circle3"&lt;/div>
	&lt;/body>
	&lt;style>
		#circle1 {
			offset-path: 0deg;
			offset-distance: 50%;
		}
		#circle2 {
			offset-path: 90deg;
			offset-distance: 20%;
		}
		#circle3 {
			offset-path: 225deg;
			offset-distance: 100%;
		}
	&lt;/style>
</pre>
<div class=figure> 
	<img alt="An image of three elements positioned to polar coordinates" src="images/simple_offset_position.png" style="width: 300px;"/>
	<figcaption>An example of positioning element in polar coordinates</figcaption>
</div>
</div>

<h3 id="offset-position-property">Define the initial position of the path: The 'offset-position' property</h3>
<pre class='propdef'>
Name: offset-position
Applies to: all elements
Value: auto | <<position>>
Initial: auto
Media: visual
Inherited: no
Percentages: Refer to the size of containing block
Animatable: as <a href="https://www.w3.org/TR/css3-transitions/#animtype-lpcalc">position</a>
</pre>
Specifies the initial position of the path.

Values are defined as follows:
<dl dfn-for="offset-position" dfn-type="value">
<dt><var>auto</var></dt>
<dd>Computes to the current position of the element.</dd>

<dt><<position>></dt>
<dd>Represents the horizontal and the vertical offsets 
	of the initial position of the path from the top left corner of the containing block
	that are computed as specified in CSS Backgrounds [[CSS3-BACKGROUND]].
</dd>
</dl>

<h3 id="offset-anchor-property">Define an anchor point: The 'offset-anchor' property</h3>
<pre class='propdef'>
Name: offset-anchor
Applies to: All elements
Value: <<position>>
Initial: auto
Media: visual
Inherited: no
Percentages: Relative to the width and the height of an element
Animatable: as <<position>>
</pre>

Defines an anchor point of the element positioned along the path. 
The anchor specifies the point of the element which is to be considered 
as the point that is moved along the path.

Values have the following meanings:
<dl dfn-for="offset-anchor" dfn-type="value">
<dt><var>auto</var></dt>
<dd>Computes to the value from 'offset-position'.
	When ''auto'' is given to 'offset-anchor', 
	'offset-position' behaves similar to 'background-position'.
</dd>
<dt><<position>></dt>
<dd>
	<dl>
		<dt><<percentage>></dt>
		<dd>A percentage for the horizontal offset is relative to width of content box 
		area of the element.
		A percentage for the vertical offset is relative to the height of the content box
		area of the element.
		For example, with a value pair of '100%, 0%', an anchor point is on the upper right corner of the element.</dd>

		<dt><<length>></dt>
		<dd>A length value gives a length offset from the upper left corner of the element's content area.</dd>
	</dl>
</dd>
</dl>

<div class='example'>
The following explains how to set the anchor point of the element.

<pre class="lang-css">
	#plane {
		offset-anchor: center;
	}
</pre>

The red dot in the middle of the shape indicates the anchor point of the shape.
<div class=figure>
	<img src="images/plane.svg" width="160" height="140" alt="Shape with its anchor point">
	<figcaption>A red dot in the middle of a plane shape indicates the shape's anchor point.</figcaption>
</div>
</div>

<div class='example'>
This example shows an alignment of four elements with different anchor points.

<pre class="lang-html">
	&lt;style>
		#item1 {
			offset-path: 45deg;
			offset-distance: 100%;
			offset-anchor: right top;
		}
		#item2 {
			offset-path: 135deg;
			offset-distance: 100%;
			offset-anchor: right bottom;
			}
		#item3 {
			offset-path: 225deg;
			offset-distance: 100%;
			offset-anchor: left bottom;
		}
		#item4 {
			offset-path: 315deg;
			offset-distance: 100%;
			offset-anchor: left top;
		}
	&lt;/style>
	&lt;body>
		&lt;div id="item1">&lt;/div>
		&lt;div id="item2">&lt;/div>
		&lt;div id="item3">&lt;/div>
		&lt;div id="item4">&lt;/div>
	&lt;/body>
</pre>
<div class=figure>
	<img src="images/offset_anchor.png" alt="An example of offset-anchor" style="width: 300px;">
	<figcaption>An example of 'offset-anchor'</figcaption>
</div>
</div>

<h3 id="offset-rotation-property">Rotation at point: The 'offset-rotation' property</h3>
<pre class='propdef'>
Name: offset-rotation
Value: [ auto | reverse ] && <<angle>>
Initial: auto
Applies to: All elements. In SVG, it applies to <a href="">container elements</a> excluding the <{defs}> element and all <a>graphics elements</a>
Inherited: no
Percentages: n/a
Computed value: as specified
Media: visual
Animatable: yes
</pre>

Defines the direction of the element while positioning along the <a>path</a>.

Values have the following meanings:

<dl dfn-for="offset-rotation" dfn-type="value">
<dt><dfn>auto</dfn></dt>
<dd>Indicates that the object is rotated (over time if 'offset-distance' is animated) by 
the angle of the direction 
(i.e., directional tangent vector) of the <a>path</a>. 
If specified in combination with <<angle>>, the computed value of <<angle>> is added
to the computed value of ''auto''.</dd>

<dt><dfn>reverse</dfn></dt>
<dd>Indicates that the object is rotated (over time if 'offset-distance' is animated) by
 the angle of the direction 
(i.e., directional tangent vector) of the <a>path</a> plus 180 degrees. 
	If specified in combination with <<angle>>, the computed value of <<angle>> is added 
	to the computed value of ''reverse''.

	<p class="note">This is the same as specifying ''auto 180deg''.
</dd>

<dt><<angle>></dt>
<dd>Indicates that the element has a constant rotation transformation applied to it 
by the specified rotation angle.
See definitions of ''auto'' or ''reverse'' if specified in combination with 
either one of the keywords.
For the purpose of this argument, ''0deg'' points to the right side in the direction of 
the positive y-axis, and positive angles represent clockwise rotation, 
so ''90deg'' point toward the direction of the positive x-axis.</dd>
</dl>

Note: The rotation described here does not override or replace any rotation defined by 
the 'transform' property.

<div class="example">
The following examples use the shape of a plane. 
The red dot in the middle of the shape indicates the origin of the shape.
<div class=figure>
	<img src="images/plane.svg" width="160" height="140" alt="Shape with its origin">
	<figcaption>A red dot in the middle of a plane shape indicates the shape's origin.</figcaption>
</div>

When the shape's point of origin is placed at different positions along the path and 
'offset-rotation' isn't specified, the shape points to the positive direction of the x-axis.
<div class=figure>
	<img src="images/offset-rotation-none.svg" width="470" height="120" alt="Path without rotation">
	<figcaption>A black plane at different positions on a blue dotted path without 
	rotation transforms.</figcaption>
</div>

If the 'offset-rotation' property is set to ''auto'', the shape's point of origin is 
placed at different positions along the path.
The shape is rotated based on the gradient at the current position and faces 
the direction of the path at this position.

<div class=figure>
	<img src="images/offset-rotation-auto.svg" width="470" height="120" alt="Path with auto rotation">
	<figcaption>A black plane at different positions on a blue dotted path, 
	rotated in the direction of the path.</figcaption>
</div>

In this example, the 'offset-rotation' property is set to ''reverse''.
The plane faces the opposite direction of the path at each position on the path.
<div class=figure>
	<img src="images/offset-rotation-reverse.svg" width="470" height="120" alt="Path with reverse auto rotation">
	<figcaption>A black plane at different positions on a blue dotted path, 
	rotated in the opposite direction of the path.</figcaption>
</div>

The last example sets the 'offset-rotation' property to ''45deg''.
The shape is rotated by 45 degree once and keeps the rotation at each position 
on the path.
<div class=figure>
	<img src="images/offset-rotation-45.svg" width="470" height="120" alt="Path with fixed rotation">
	<figcaption>A black plane at different positions on a blue dotted path, 
	rotated by a fixed amount of degree.</figcaption>
</div>
</div>

<div class='example'>
This example shows how ''auto'' or ''reverse'' works specified in combination 
with <<angle>>. 
The computed value of <<angle>> is added to the computed value of ''auto'' or ''reverse''.

<pre class="lang-html">
	&lt;style>
		body {
			border-radius: 50%;
		}
		#item1 {
			offset-path: 0deg;
			offset-distance: 90%;
			offset-rotate: auto 90deg;
		}
		#item2 {
			offset-path: 45deg;
			offset-distance: 90%;
			offset-rotate: auto 90deg;
		}
		#item3 {
			offset-path: 135deg;
			offset-distance: 90%;
			offset-rotate: auto -90deg;
		}
		#item4 {
			offset-path: 180deg;
			offset-distance: 90%;
			offset-rotate: auto -90deg;
		}
		#item5 {
			offset-path: 225deg;
			offset-distance: 90%;
			offset-rotate: auto -90deg;
		}
		#item6 {
			offset-path: -45deg;
			offset-distance: 90%;
			offset-rotate: auto 90deg;
		}
	&lt;/style>
	&lt;body>
		&lt;div id="item1">1&lt;/div>
		&lt;div id="item2">2&lt;/div>
		&lt;div id="item3">3&lt;/div>
		&lt;div id="item4">4&lt;/div>
		&lt;div id="item5">5&lt;/div>
		&lt;div id="item6">6&lt;/div>
	&lt;/body>
</pre>
<div class="figure">
	<img alt="An image of example for offset-rotation" src="images/rotate_by_angle_with_auto.png" style="width: 250px; text-align: center"/>
	<figcaption>The elements are rotated by the value of ''auto'' with 
	a fixed amount of degree.</figcaption>
</div>
</div>

ISSUE: More natural names requested for ''auto'' and ''reverse''.

See the section <a href="#offset-processing">“Offset processing”</a> for 
how to process an 'offset-rotation'.

<h3 id="motion-shorthand">Offset shorthand: The 'offset' property</h3>
<pre class='propdef'>
	Name: offset
	Value: &lt;'offset-path'> && &lt;'offset-distance'> && &lt;'offset-position'> && &lt;'offset-anchor'> && &lt;'offset-rotation'>
	Initial: see individual properties
	Applies to: All elements. In SVG, it applies to <a href="">container elements</a> excluding the <{defs}> element and all <a>graphics elements</a>
	Inherited: no
	Percentages: see individual properties
	Computed value: see individual properties
	Media: visual
	Animatable: see individual properties
</pre>

This is a shorthand property for setting 'offset-path', 'offset-distance', 
'offset-position', 'offset-anchor' and 'offset-rotation'.
Omitted values are set to their initial values.

<h3 id="offset-processing">Offset processing</h3>
<h4 id="calculating-the-computed-distance-along-a-path">Calculating the computed distance along a path</h4>

Processing the distance along a path operates differently depending upon whether
the path is open or closed:

*   References to <<angle>> lines are closed.
*   All basic CSS shapes are closed. 
*   Paths (including references to SVG Paths) are closed only if the final command 
	in the path list is a closepath command ("z" or "Z").
*   References to SVG circles, ellipses, images, polygons and rects are closed.
*   References to SVG lines and polylines are open.

To determine the <dfn>computed distance</dfn> for a given <var>path</var> and <var>distance</var>:

<div class="switch">

1.  Let the <var>total length</var> be the total length of <var>path</var> with all
	sub-paths.

2.  
    :   If <var>distance</var> is a length:
    ::  Let <var>upper bound</var> be equal to the <var>total length</var>.
    :   Otherwise:
    ::  Let <var>upper bound</var> be equal to 100%.

3.  
    :   If <var>path</var> is a closed path:
    ::  Let <a>computed distance</a> be equal to <var>distance</var> modulus <var>upper bound</var>.
    :   Otherwise:
    ::  Let <a>computed distance</a> be equal to <var>distance</var> clamped by 0 and <var>upper bound</var>.

</div>

<h4 id="calculating-path-transform">Calculating the path transform</h4>

<div class="switch">
1.  Let <var>path</var> be the geometry of the closed line segment, specified basic shape, path or SVG <a>shape element</a> reference.
2.  Let <var>distance</var> be the computed value of 'offset-distance'.
3.
    :   If <var>path</var> is a valid path:
    ::  

        1.  Determine the <a>computed distance</a> by invoking the process for
            <a href='#calculating-the-computed-distance-along-a-path' section>
            Calculating the computed distance along a path</a> on
            <var>path</var> and <var>distance</var>.
        2.  Let <var>position</var> be the coordinate pair at 
            <a>computed distance</a> along <var>path</var>.
        3.  Create the supplemental transformation matrix <var>transform</var>
            to the local coordinate system of the element.
        4.  Translate <var>transform</var> by <var>position</var>.
        5.  Let <var>rotate</var> be the computed value of 'offset-rotation'.
        6.  Post-multiply the rotation <var>rotate</var> to <var>transform</var>.
        7.  Post-multiply <var>transform</var> to the local coordinate system of
            the element.

</div>

<p class="issue">Do we need to say how to get the position in more detail?</p>
<p class="issue">There needs to be a process for converting <var>rotate</var> to an angle.</p>

ISSUE: Do we need to specify an origin of the element in motion so that it can be positioned accordingly before the motion? Something like motion-origin? Should we reuse 'transform-origin'? (Probably not since the ''z'' coordinate doesn't make any sense.)
